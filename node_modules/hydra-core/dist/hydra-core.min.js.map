{"version":3,"file":"generated.js","sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","hydra-core.js","lib/core.js","lib/http-client.js","lib/model.js","lib/utils.js","lib/validation.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","hydra","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length",1,"utils","loadApi","url","httpClient","request","then","response","api","body","iri","documentFromResponse","apiLink","headers","apiUrl","document","contentLocation","loadDocument","defaults","invokeOperation","jsonLdInvoke","validateClass","simpleValidateClass","model","createInvoke","createHttpJsonLdInvoke","rawJsonLdInvoke","_","jsonldp","promises","ns","vocab","apiDocumentation","member","rdfs","comment","label","range","Api","def","init","classFrameDef","@context","@vocab","@type","operationFrameDef","Promise","all","frame","classDef","operationDef","inits","classes","map","instance","Class","push","findClass","find","bind","operations","Operation","findOperation","Document","resolve","unwrap","values","filter","type","ClassDocument","properties","documentClass","abstractProperty","PropertyDocument","reduce","classProperties","concat","findProperty","arguments","method","shift","documentProperty","undefined","reject","toArray","supportedOperation","supportedProperty","propertyDef","Property","validate","abstract","operation","OperationDocument","property","statusCodes","expects","returns","link","invoke","title","description","readonly","writeonly","json","base","isString","JSON","parse","expand","compact","jsonld","XMLHttpRequest","utf8Encode","string","replace","utftext","c","charCodeAt","String","fromCharCode","base64Encode","input","chr1","chr2","chr3","enc1","enc2","enc3","enc4","keyStr","output","isNaN","charAt","requestAsync","content","callback","options","xhr","onreadystatechange","readyState","DONE","headerLines","getAllResponseHeaders","split","resHeaders","headerLine","toLowerCase","status","responseText","open","header","setRequestHeader","user","password","send","req","auth","error","res","statusCode","resBody","rels","parseLinkHeader","expandIri","target","rawInvoke","Accept","stringify","trim","expandedBody","context","toJSON","create","copyProperties","object","root","copy","keys","key","value","isFunction","isObject","isArray","hide","processOperations","forEach","processProperties","compactIri","processClass","apiClass","clone","load","globalModule","collection","members","@id","http://www.w3.org/ns/hydra/core#member","dummy","compactDummy","pop","@base","name","expanded","obj","isCollection","indexOf"],"mappings":"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","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","var\n  hydra = require('./lib/core'),\n  utils = require('./lib/utils');\n\n\nrequire('./lib/http-client');\nrequire('./lib/model');\nrequire('./lib/validation');\n\n\nhydra.loadApi = function (url) {\n  return hydra.httpClient.request('GET', url)\n    .then(function (response) {\n      return hydra.api(response.body, url);\n    })\n    .then(function (api) {\n      api.iri = url;\n\n      return api;\n    });\n};\n\n\nhydra.documentFromResponse = function (response) {\n  return hydra.httpClient.apiLink(response.headers, response.request.url)\n    .then(function (apiUrl) {\n      return hydra.loadApi(apiUrl);\n    })\n    .then(function (api) {\n      return hydra.document(api, response.body, response.request.url);\n    })\n    .then(function (document) {\n      return hydra.httpClient.contentLocation(response.headers, response.request.url)\n        .then(function (contentLocation) {\n          document.iri = contentLocation || response.request.url;\n\n          return document;\n        });\n    });\n};\n\n\nhydra.loadDocument = function (url) {\n  return hydra.httpClient.request('GET', url)\n    .then(function (response) {\n      return hydra.documentFromResponse(response, url);\n    });\n};\n\n\n// export utils\nhydra.utils = utils;\n\n\n// set defaults\nhydra.defaults = {};\nhydra.defaults.invokeOperation = hydra.httpClient.jsonLdInvoke;\nhydra.defaults.validateClass = hydra.simpleValidateClass;\nhydra.defaults.model = {};\nhydra.defaults.model.createInvoke = hydra.model.createHttpJsonLdInvoke;\nhydra.defaults.model.invokeOperation = hydra.httpClient.rawJsonLdInvoke;\n\n\nmodule.exports = hydra;\n","var\n  utils = require('./utils'),\n  _ = utils.require('lodash'),\n  jsonldp = utils.require('jsonld').promises();\n\n\nvar hydra = {};\n\n\nhydra.ns = {\n  vocab: 'http://www.w3.org/ns/hydra/core#',\n  apiDocumentation: 'http://www.w3.org/ns/hydra/core#apiDocumentation',\n  member: 'http://www.w3.org/ns/hydra/core#member'\n};\n\n\nvar rdfs = {\n  ns: {\n    comment: 'http://www.w3.org/2000/01/rdf-schema#comment',\n    label: 'http://www.w3.org/2000/01/rdf-schema#label',\n    range: 'http://www.w3.org/2000/01/rdf-schema#range'\n  }\n};\n\n\nhydra.Api = function (def) {\n  var self = this;\n\n  this.iri = utils.iri(def);\n\n  this.init = function () {\n    var classFrameDef = {\n      '@context': {\n        '@vocab': hydra.ns.vocab,\n        'label': rdfs.ns.label\n      },\n      '@type': 'Class'\n    };\n\n    var operationFrameDef = {\n      '@context': {\n        '@vocab': hydra.ns.vocab,\n        'label': rdfs.ns.label\n      },\n      '@type': 'Operation'\n    };\n\n    return Promise.all([\n      jsonldp.frame(def, classFrameDef)\n        .then(function (classDef) {\n          self.classDef = classDef;\n        }),\n      jsonldp.frame(def, operationFrameDef)\n        .then(function (operationDef) {\n          self.operationDef = operationDef;\n        })])\n      .then(function () {\n        var inits = [];\n\n        self.classes = self.classDef['@graph'].map(function (def) {\n          var instance = new hydra.Class(self, def);\n\n          inits.push(instance.init());\n\n          return instance;\n        });\n\n        self.findClass = _.find.bind(null, self.classes, 'iri');\n\n        self.operations = self.operationDef['@graph'].map(function (def) {\n          var instance = new hydra.Operation(self, def);\n\n          inits.push(instance.init());\n\n          return instance;\n        });\n\n        self.findOperation = _.find.bind(null, self.operations, 'iri');\n\n        return Promise.all(inits)\n          .then(function () {\n            return self;\n          });\n      });\n  };\n};\n\n\nhydra.Document = function (api, def, iri) {\n  var self = this;\n\n  this.api = api;\n  this.iri = iri || utils.iri(def);\n\n  this.init = function () {\n    return Promise.resolve()\n      .then(function () {\n        def = utils.unwrap(def);\n\n        if (!('@type' in def)) {\n          return Promise.reject('type missing');\n        }\n\n        self.classes = _.values(def['@type'])\n          .filter(function (type) {\n            return !!self.api.findClass(type);\n          })\n          .map(function (type) {\n            return new hydra.ClassDocument(self, self.api.findClass(type), def);\n          });\n\n        self.properties = self.classes\n          .map(function (documentClass) {\n            return documentClass.abstract.properties\n              .filter(function (abstractProperty) {\n                return abstractProperty.iri in def;\n              })\n              .map(function (abstractProperty) {\n                return new hydra.PropertyDocument(self, abstractProperty, def[abstractProperty.iri]);\n              });\n          })\n          .reduce(function (properties, classProperties) {\n            return properties.concat(classProperties);\n          }, []);\n\n        self.findProperty = _.find.bind(null, self.properties, 'iri');\n\n        self.findOperation = function() {\n          if (arguments.length === 1) {\n            var method = arguments[0];\n\n            return self.classes\n              .map(function (documentClass) {\n                return documentClass.findOperation(method);\n              })\n              .shift();\n          } else {\n            var iri = arguments[0];\n            var method = arguments[1];\n\n            var documentProperty = self.findProperty(iri);\n\n            if (!documentProperty) {\n              return undefined;\n            }\n\n            return documentProperty.findOperation(method);\n          }\n        };\n\n        return self;\n      });\n  };\n};\n\n\nhydra.Class = function (api, def) {\n  var self = this;\n\n  this.api = api;\n  this.iri = def['@id'];\n  this.label = def.label;\n\n  this.init = function () {\n    return Promise.resolve().then(function () {\n      self.operations = utils.toArray(def.supportedOperation).map(function (operationDef) {\n        return self.api.findOperation(operationDef['@id']);\n      });\n\n      self.findOperation = _.find.bind(null, self.operations, 'method');\n\n      self.properties = utils.toArray(def.supportedProperty).map(function (propertyDef) {\n        return new hydra.Property(self.api, propertyDef);\n      });\n\n      self.findProperty = _.find.bind(null, self.properties, 'iri');\n\n      return self;\n    });\n  };\n\n  this.validate = hydra.defaults.validateClass;\n};\n\n\nhydra.ClassDocument = function (document, abstract, def) {\n  this.document = document;\n  this.iri = abstract.iri;\n  this.abstract = abstract;\n  this.label = this.abstract.label;\n  this.operations = abstract.operations.map(function (operation) {\n    return new hydra.OperationDocument(document, operation);\n  });\n  this.properties = abstract.properties\n    .filter(function (property) {\n      return property.iri in def;\n    })\n    .map(function (property) {\n      return new hydra.PropertyDocument(document, property, def[property.iri]);\n    });\n\n  this.findOperation = _.find.bind(null, this.operations, 'method');\n\n  this.findProperty = _.find.bind(null, this.properties, 'iri');\n};\n\n\nhydra.Operation = function (api, def) {\n  var self = this;\n\n  this.api = api;\n  this.iri = def['@id'];\n  this.label = def.label;\n\n  this.init = function () {\n    return Promise.resolve().then(function () {\n      self.method = def.method;\n      self.statusCodes = def.statusCodes;\n      self.expects = self.api.findClass(def.expects);\n      self.returns = self.api.findClass(def.returns);\n\n      return self;\n    });\n  };\n};\n\n\nhydra.OperationDocument = function (document, abstract, def) {\n  this.document = document;\n  this.iri = abstract.iri;\n  this.abstract = abstract;\n  this.link = !!def ? utils.iri(def) : null;\n  this.label = this.abstract.label;\n  this.method = this.abstract.method;\n  this.statusCodes = this.abstract.statusCodes;\n  this.expects = this.abstract.expects;\n  this.returns = this.abstract.returns;\n  this.invoke = hydra.defaults.invokeOperation.bind(this);\n};\n\n\nhydra.Property = function (api, def) {\n  var self = this;\n\n  this.api = api;\n  this.iri = utils.iri(def.property);\n  this.title = def.title;\n  this.description = def.description;\n  this.label = def.label;\n  this.readonly = def.readonly;\n  this.writeonly = def.writeonly;\n  this.operations = utils.toArray(def.property.supportedOperation)\n    .map(function (operationDef) {\n      return self.api.findOperation(utils.iri(operationDef));\n    });\n\n  this.findOperation = _.find.bind(null, this.operations, 'method');\n};\n\n\nhydra.PropertyDocument = function (document, abstract, def) {\n  this.document = document;\n  this.iri = abstract.iri;\n  this.abstract = abstract;\n  this.link = !!def ? utils.iri(def) : null;\n  this.label = this.abstract.label;\n  this.operations = abstract.operations.map(function (operation) {\n    return new hydra.OperationDocument(document, operation, def);\n  });\n\n  this.findOperation = _.find.bind(null, this.operations, 'method');\n};\n\n\nhydra.api = function (json, base) {\n  if (_.isString(json)) {\n    json = JSON.parse(json);\n  }\n\n  return jsonldp.expand(json, {base: base})\n    .then(function (compact) {\n      return (new hydra.Api(compact)).init();\n    });\n};\n\n\nhydra.document = function (api, json, base) {\n  if (_.isString(json)) {\n    json = JSON.parse(json);\n  }\n\n  return jsonldp.expand(json, {base: base})\n    .then(function (compact) {\n      return (new hydra.Document(api, compact, base)).init();\n    });\n};\n\n\nmodule.exports = hydra;","var\n  hydra = require('./core'),\n  utils = require('./utils'),\n  jsonld = utils.require('jsonld'),\n  jsonldp = utils.require('jsonld').promises();\n\n\nhydra.httpClient = {};\n\n\nif (typeof XMLHttpRequest !== 'undefined') {\n  /**\n   * Converts a string to a UTF-8 encoded string\n   * @param string The string to encode\n   * @returns {string} The UTF-8 string\n   */\n  hydra.httpClient.utf8Encode = function (string) {\n    string = string.replace(/\\r\\n/g, '\\n');\n\n    var utftext = '';\n\n    for (var n = 0; n < string.length; n++) {\n      var c = string.charCodeAt(n);\n\n      if (c < 128) {\n        utftext += String.fromCharCode(c);\n      } else if ((c > 127) && (c < 2048)) {\n        utftext += String.fromCharCode((c >> 6) | 192);\n        utftext += String.fromCharCode((c & 63) | 128);\n      } else {\n        utftext += String.fromCharCode((c >> 12) | 224);\n        utftext += String.fromCharCode(((c >> 6) & 63) | 128);\n        utftext += String.fromCharCode((c & 63) | 128);\n      }\n    }\n\n    return utftext;\n  };\n\n  /**\n   * Converts a string to a base-64 encoded string\n   * @param input The string to encode\n   * @returns {string} The base-64 string\n   */\n  hydra.httpClient.base64Encode = function (input) {\n    var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n    var output = '';\n    var chr1, chr2, chr3, enc1, enc2, enc3, enc4;\n    var i = 0;\n\n    input = hydra.httpClient.utf8Encode(input);\n\n    while (i < input.length) {\n      chr1 = input.charCodeAt(i++);\n      chr2 = input.charCodeAt(i++);\n      chr3 = input.charCodeAt(i++);\n\n      enc1 = chr1 >> 2;\n      enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n      enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n      enc4 = chr3 & 63;\n\n      if (isNaN(chr2)) {\n        enc3 = enc4 = 64;\n      } else if (isNaN(chr3)) {\n        enc4 = 64;\n      }\n\n      output = output + keyStr.charAt(enc1) + keyStr.charAt(enc2) + keyStr.charAt(enc3) + keyStr.charAt(enc4);\n    }\n\n    return output;\n  };\n\n  /**\n   * Request implementation using XMLHttpRequest interface\n   *\n   * @param method HTTP method\n   * @param url URL\n   * @param headers Header key/value pairs\n   * @param content Content\n   * @param callback Callback function using with interface: statusCode, headers, content, error\n   */\n  hydra.httpClient.requestAsync = function (method, url, headers, content, callback, options) {\n    options = options || {};\n\n    var xhr = new XMLHttpRequest();\n\n    xhr.onreadystatechange = function () {\n      if (xhr.readyState === xhr.DONE) {\n        var\n          headerLines = xhr.getAllResponseHeaders().split('\\r\\n'),\n          resHeaders = {};\n\n        for (var i = 0; i < headerLines.length; i++) {\n          var headerLine = headerLines[i].split(': ', 2);\n          resHeaders[headerLine[0].toLowerCase()] = headerLine[1];\n        }\n\n        callback(xhr.status, resHeaders, xhr.responseText);\n      }\n    };\n\n    xhr.open(method, url, true);\n\n    for (var header in headers) {\n      xhr.setRequestHeader(header, headers[header]);\n    }\n\n    if (options.user && options.password) {\n      xhr.setRequestHeader(\"Authorization\", \"Basic \" + hydra.httpClient.base64Encode(options.user + \":\" + options.password));\n    }\n\n    xhr.send(content);\n  };\n} else {\n  /**\n   * Request implementation using the npm request module\n   *\n   * @param method HTTP method\n   * @param url URL\n   * @param headers Header key/value pairs\n   * @param content Content\n   * @param callback Callback function using with interface: statusCode, headers, content, error\n   * @param options Additional options like user or password\n   */\n  hydra.httpClient.requestAsync = function (method, url, headers, content, callback, options) {\n    var request = require('request');\n\n    options = options || {};\n\n    var req = {\n      method: method,\n      url: url,\n      headers: headers,\n      body: content\n    };\n\n    if (options.user && options.password) {\n      req.auth = {\n        user: options.user,\n        password: options.password\n      };\n    }\n\n    request(req, function (error, res, body) {\n      if (error) {\n        callback(null, null, null, error);\n      } else {\n        callback(res.statusCode, res.headers, body);\n      }\n    });\n  };\n}\n\n/**\n * Promise request implementation\n *\n * @param method HTTP method\n * @param url URL\n * @param headers Header key/value pairs\n * @param content Content\n * @param options Additional options like user or password\n * @returns {Promise}\n */\nhydra.httpClient.request = function (method, url, headers, content, options) {\n  return new Promise(function (resolve, reject) {\n    hydra.httpClient.requestAsync(method, url, headers, content, function (status, resHeaders, resBody, error) {\n      var response = {\n        status: status,\n        headers: resHeaders,\n        body: resBody,\n        request: {\n          url: url,\n          method: method,\n          headers: headers,\n          body: content\n        }\n      };\n\n      if (error) {\n        reject(error);\n      } else if (status >= 400) {\n        reject(new Error('status code ' + status + ': ' + resBody));\n      } else {\n        resolve(response);\n      }\n    }, options);\n  });\n};\n\n/**\n * Extracts the Hydra API Documentation value of the Link header field\n *\n * @param headers\n * @param base\n * @returns {Promise}\n */\nhydra.httpClient.apiLink = function (headers, base) {\n  if (!('link' in headers)) {\n    return Promise.resolve(undefined);\n  }\n\n  var rels = jsonld.parseLinkHeader(headers.link);\n\n  if (!(hydra.ns.apiDocumentation in rels)) {\n    return Promise.resolve(undefined);\n  }\n\n  return utils.expandIri(rels[hydra.ns.apiDocumentation].target, base);\n};\n\n/**\n * Extracts the value of the Content-Location header field\n *\n * @param headers\n * @param base\n * @returns {*}\n */\nhydra.httpClient.contentLocation = function (headers, base) {\n  if (!('content-location' in headers)) {\n    return Promise.resolve(undefined);\n  }\n\n  return utils.expandIri(headers['content-location'], base);\n};\n\n/**\n * Calls an operations with the given headers and content\n *\n * @param headers\n * @param content\n * @param options\n * @returns {Promise}\n */\nhydra.httpClient.rawInvoke = function (headers, content, options) {\n  var self = this;\n\n  var url = self.link || self.document.iri;\n\n  return hydra.httpClient.request(self.method, url, headers, content, options);\n};\n\n/**\n * Calls an operations with the JSON-LD content and converts the response body to JSON-LD\n *\n * @param content\n * @param options\n * @returns {Promise}\n */\nhydra.httpClient.rawJsonLdInvoke = function (content, options) {\n  var self = this;\n\n  var headers = {\n    'Accept': 'application/ld+json'\n  };\n\n  if (self.method === 'PATCH' || self.method === 'POST' || self.method === 'PUT') {\n    headers['Content-Type'] = 'application/ld+json';\n  }\n\n  return hydra.httpClient.rawInvoke.bind(self)(headers, JSON.stringify(content), options)\n    .then(function (response) {\n      if (response.body && response.body.trim() !== '') {\n        return jsonldp.expand(JSON.parse(response.body), {base: response.request.url})\n          .then(function (expandedBody) {\n            response.body = expandedBody;\n\n            return response;\n          })\n      } else {\n        response.body = null;\n\n        return response;\n      }\n    });\n};\n\n/**\n * Calls an operations with the JSON-LD content and returns the response body converted to JSON-LD\n *\n * @param content\n * @param options\n * @returns {Promise}\n */\nhydra.httpClient.jsonLdInvoke = function (content, options) {\n  var self = this;\n\n  return hydra.httpClient.rawJsonLdInvoke.bind(self)(content, options)\n    .then(function (response) {\n      return response.body;\n    });\n};\n","var\n  hydra = require('./core'),\n  utils = require('./utils'),\n  _ = utils.require('lodash'),\n  jsonldp = utils.require('jsonld').promises();\n\n\nhydra.model = {};\n\n\n/**\n * Creates an invoke function for model objects that compacts the response using the given context\n *\n * @param operation\n * @returns {Function}\n */\nhydra.model.createHttpJsonLdInvoke = function (operation) {\n  return function (input, options) {\n    options = options || {};\n\n    var context = {};\n\n    if ('@context' in this) {\n      context = this['@context'];\n    }\n\n    context = options.context || context;\n\n    if (input && input.toJSON) {\n      input = input.toJSON();\n    }\n\n    return hydra.httpClient.rawJsonLdInvoke.call(operation, input, options)\n      .then(function (response) {\n        if (!response.body) {\n          return Promise.resolve(null);\n        }\n\n        return hydra.documentFromResponse(response)\n          .then(function (document) {\n            return jsonldp.compact(response.body, context)\n              .then(function (output) {\n                return hydra.model.create(document.classes, output);\n              });\n          });\n      });\n  };\n};\n\n/**\n * Converts a model object to serializable object without functions and property flagged with @omit\n */\nhydra.model.toJSON = function () {\n  var copyProperties = function (object, root) {\n    if (!object) {\n      return null;\n    }\n\n    var copy = _.keys(object).reduce(function (json, key) {\n      var value = object[key];\n\n      // don't add function properties\n      if (_.isFunction(value)) {\n        return json;\n      }\n\n      // don't add properties with @omit flag\n      if (_.isObject(value) && '@omit' in value && value['@omit']) {\n        return json;\n      }\n\n      if (_.isObject(value)) {\n        // copy sub properties\n        json[key] = copyProperties(value, root);\n      } else {\n        // copy string values\n        json[key] = value;\n      }\n\n      return json;\n    }, {});\n\n    // convert to Array if original object was an Array\n    if (_.isArray(object)) {\n      copy = _.values(object);\n    }\n\n    return copy;\n  };\n\n  return copyProperties(this);\n};\n\n/**\n * Adds a @omit property to an object to hide it from serialization\n *\n * @param property\n * @returns {Object}\n */\nhydra.model.hide = function (property) {\n  property['@omit'] = true;\n\n  return property;\n};\n\n/**\n * Creates a model object based on one or more classes\n *\n * @param classes The class or classes the model will be bases on\n * @param properties Properties to merge into the model object\n * @param options Additional options to control the model creation\n * @returns {*}\n */\nhydra.model.create = function (classes, properties, options) {\n  var processOperations = function (root, operations) {\n    operations.forEach(function (operation) {\n      var key = '@' + operation.method.toLowerCase();\n\n      if (!(key in root)) {\n        root[key] = options.createInvoke(operation).bind(model);\n      }\n    });\n\n    return Promise.resolve();\n  };\n\n  var processProperties = function (root, properties) {\n    return Promise.all(properties.map(function (property) {\n      return utils.compactIri(property.iri, model['@context'])\n        .then(function (key) {\n          if (!(key in root)) {\n            root[key] = {};\n          }\n\n          return processOperations(root[key], property.operations);\n        });\n    }));\n  };\n\n  var processClass = function (apiClass) {\n    model['@type'].push(apiClass.iri);\n\n    return processOperations(model, apiClass.operations)\n      .then(function () {\n        return processProperties(model, apiClass.properties);\n      });\n  };\n\n  classes = utils.toArray(classes);\n\n  options = options || {};\n  options.createInvoke = options.createInvoke || hydra.defaults.model.createInvoke;\n\n  var model = _.clone(properties);\n\n  _.defaults(model, {\n    '@context': {},\n    toJSON: hydra.model.toJSON\n  });\n\n  model['@type'] = [];\n  model.api = classes[0].api || classes[0].abstract.api;\n  model.api['@omit'] = true;\n\n  if (classes[0].document) {\n    model.document = classes[0].document;\n    model.document['@omit'] = true;\n  }\n\n  return Promise.all(classes.map(function (apiClass) {\n    return processClass(apiClass);\n  })).then(function () {\n    return model;\n  });\n};\n\n/**\n * Creates a model object based on a GET request to the given URL\n *\n * @param url URL\n * @param properties Properties that will be merged into the model object\n * @param options Options for the request\n * @returns {Promise}\n */\nhydra.model.load = function (url, properties, options) {\n  return hydra.loadDocument(url)\n    .then(function (document) {\n      return hydra.model.create(document.classes, properties, options);\n    });\n};\n","var utils = {};\n\n\nutils.require = function (module) {\n  var globalModule = module;\n\n  if (globalModule === 'lodash') {\n    globalModule = '_';\n  }\n\n  if (typeof window !== 'undefined' && globalModule in window) {\n    return window[globalModule];\n  }\n\n  return require(module);\n};\n\n\nvar\n  _ = utils.require('lodash'),\n  jsonldp = utils.require('jsonld').promises();\n\n\n/**\n * Creates a Hydra Collection from a map or array of members\n *\n * @param iri\n * @param members\n * @returns {Collection}\n */\nutils.collection = function (iri, members) {\n  return {\n    '@id': iri,\n    '@type': 'http://www.w3.org/ns/hydra/core#Collection',\n    'http://www.w3.org/ns/hydra/core#member': _.values(members).map(function (member) {\n      return {\n        '@id': member['@id'],\n        '@type': member['@type']\n      };\n    })\n  };\n};\n\n/**\n * Uses the given context to create a short form of the IRI\n *\n * @param iri\n * @param context\n * @returns {Promise}\n */\nutils.compactIri = function (iri, context) {\n  var dummy = {};\n\n  dummy[iri] = '';\n\n  return jsonldp.compact(dummy, context)\n    .then(function (compactDummy) {\n      return _.keys(compactDummy).pop();\n    });\n};\n\n/**\n * Creates a long version of the IRI using the given base\n *\n * @param iri\n * @param base\n * @returns {Promise}\n */\nutils.expandIri = function (iri, base) {\n  if (!base) {\n    return Promise.resolve(iri);\n  }\n\n  var dummy = {\n    '@context': {\n      '@base': base,\n      '@vocab': 'http://schema.org/'\n    },\n    'name': {\n      '@id': iri\n    }\n  };\n\n  return jsonldp.expand(dummy)\n    .then(function (expanded) {\n      return expanded[0]['http://schema.org/name'][0]['@id'];\n    });\n};\n\n/**\n * Extracts the IRI of an JSON-LD object\n *\n * @param obj\n * @returns {*}\n */\nutils.iri = function (obj) {\n  obj = utils.unwrap(obj);\n\n  if (!obj) {\n    return undefined;\n  }\n\n  if (_.isString(obj)) {\n    return obj;\n  }\n\n  if (!('@id' in obj)) {\n    return undefined;\n  }\n\n  return obj['@id'];\n};\n\n/**\n * Checks if the given object is a Hydra Collection\n *\n * @param collection\n * @returns {boolean}\n */\nutils.isCollection = function (collection) {\n  if (_.isObject(collection)) {\n    return false;\n  }\n\n  if (!collection.member && !(ns.member in collection)) {\n    return false;\n  }\n\n  return true;\n};\n\n/**\n * Converts single objects and Hydra Collections to Arrays and forwards existing Arrays\n *\n * @param obj\n * @returns {Array}\n */\nutils.toArray = function (obj) {\n  if (!obj) {\n    return [];\n  }\n\n  if (utils.isCollection(obj)) {\n    obj = obj.member;\n  }\n\n  if (!_.isArray(obj)) {\n    return [obj];\n  }\n\n  return obj;\n};\n\n/**\n * Extracts the first subject of an JSON-Ld object\n *\n * @param obj\n * @returns {*}\n */\nutils.unwrap = function (obj) {\n  if (!obj) {\n    return undefined;\n  }\n\n  if (_.isString(obj)) {\n    return obj;\n  }\n\n  if ('@graph' in obj) {\n    obj = obj['@graph'];\n  }\n\n  if (_.isArray(obj)) {\n    if (obj.length === 0) {\n      return undefined;\n    } else {\n      obj = obj[0];\n    }\n  }\n\n  return obj;\n};\n\n\nmodule.exports = utils;","var\n  hydra = require('./core'),\n  utils = require('./utils'),\n  jsonldp = utils.require('jsonld').promises();\n\n\nhydra.simpleValidateClass = function (object, read, write) {\n  var self = this;\n\n  if (!object) {\n    return Promise.resolve();\n  }\n\n  return jsonldp.expand(object)\n    .then(function (expanded) {\n      if (expanded.length > 1) {\n        return Promise.reject(new Error('object contains multiple subjects'));\n      }\n\n      expanded = expanded.shift();\n\n      if (!('@type' in expanded)) {\n        return Promise.reject(new Error('@type missing'));\n      }\n\n      if (utils.toArray(expanded['@type']).indexOf(self.iri) < 0) {\n        return Promise.reject(new Error('expected class <' + self.iri + '>'));\n      }\n\n      var error = self.properties\n        .map(function (property) {\n          if (property.readonly && property.iri in object) {\n            return new Error('readonly property <' + property.iri + '> filled with value \"' + object[property.iri] + '\"');\n          }\n\n          return false;\n        })\n        .filter(function (error) {\n          return !!error;\n        })\n        .shift();\n\n      if (error) {\n        return Promise.reject(error);\n      }\n\n      return Promise.resolve();\n    });\n};\n\n"]}